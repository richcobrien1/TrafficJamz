# docker-compose.prod.yml
# Production Docker Compose configuration for TrafficJamz application
# This file defines services for API, WebRTC, Frontend, and supporting infrastructure

version: "3.9"

services:
  # ──────────────── API Service ────────────────────────
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile.prod
    image: trafficjamz-api:latest
    ports:
      - "5000:5000"
    env_file:
      - .env.prod         # 📦 Use external file for secrets/env vars
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - postgres
      - mongodb
      - redis
      - influxdb
      - kafka
    networks:
      - app-network
    restart: always

  # ──────────────── Frontend ───────────────────────────
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.prod
    image: trafficjamz-frontend:latest
    ports:
      - "8080:8080"
    env_file:
      - .env.prod
    networks:
      - app-network
    restart: always
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ──────────────── PostgreSQL ─────────────────────────
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=topgun       # 🔒 Consider using secrets or .env
      - POSTGRES_DB=audiogroupapp
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always

  # ──────────────── MongoDB ────────────────────────────
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network
    restart: always

  # ──────────────── Redis ──────────────────────────────
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: always

  # ──────────────── InfluxDB ───────────────────────────
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=1Topgun123     # 🔒 Move to .env or secrets
      - DOCKER_INFLUXDB_INIT_ORG=audiogroupapp
      - DOCKER_INFLUXDB_INIT_BUCKET=location_data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - app-network
    restart: always

  # ──────────────── Zookeeper (Kafka) ──────────────────
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - app-network
    restart: always

  # ──────────────── Kafka ──────────────────────────────
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - app-network
    restart: always

  # ──────────────── NGINX (optional TLS + proxy) ───────
  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./docker/frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro                       # 🔐 TLS certs mounted from host
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api
    networks:
      - app-network
    restart: always

# ─────────────────────── Networks ───────────────────────
networks:
  app-network:
    driver: bridge

# ─────────────────────── Volumes ────────────────────────
volumes:
  postgres-data:
  mongodb-data:
  redis-data:
  influxdb-data:
