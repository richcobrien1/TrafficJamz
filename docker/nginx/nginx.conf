# ============================================================================
# nginx.conf for TrafficJamz Production
#
# Purpose:
#   - Serve the built React frontend (from /usr/share/nginx/html).
#   - Proxy API requests from /api/* to the backend service (trafficjamz-server).
#   - Ensure there is no "api/api" duplication by stripping the /api prefix
#     before forwarding to the backend.
#
# Key Notes:
#   - Frontend is built into dist/ and copied into /usr/share/nginx/html.
#   - All /api/* requests are proxied to the backend container on port 5000.
#   - React Router fallback: any non-API path returns index.html.
#   - Includes basic security headers and gzip.
# ============================================================================

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/xml+rss application/xml image/svg+xml;

    server {
        listen 80;
        server_name _;

    # ------------------------------
    # Proxy frontend requests to client container
    # ------------------------------
    # In the production workflow the `client` service builds and serves
    # the static assets (multi-stage Docker image). Nginx here acts as a
    # reverse-proxy and will forward non-API requests to the client.
    # This avoids serving host-mounted `dist` files and prevents stale
    # deployments caused by out-of-sync host artifacts.

        # ------------------------------
        # Proxy API requests
        # ------------------------------
        # Collapse accidental duplicate /api segments (e.g. /api/api/auth -> /api/auth)
        # This is a defensive rewrite to avoid 404s caused by client bundles or
        # cached assets that may include the '/api' prefix when the baseURL also
        # includes '/api'. It rewrites the incoming URI only when it contains
        # '/api/api' and then proxies the normalized path to the backend.
        location ~* ^/api(/api)+/ {
            # rewrite /api/api/... -> /api/...
            rewrite ^/api(?:/api)+(/.*)$ /api$1 break;

            proxy_pass http://backend:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Normal API proxy (most common case)
        location /api/ {
            proxy_pass http://backend:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ------------------------------
        # React Router fallback
        # ------------------------------
        location / {
            # Proxy all non-/api requests to the client service
            proxy_pass http://frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
