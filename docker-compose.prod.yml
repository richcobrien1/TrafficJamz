# File: docker-compose.prod.yml
# Purpose: Full production stack for TrafficJamz
# Usage:
#   docker compose -f docker-compose.prod.yml up -d --build
# Services:
#   - client: builds and serves the Vite frontend via nginx
#   - server: builds and runs the backend API
#   - postgres, mongodb, redis, influxdb, zookeeper, kafka: supporting infra
#   - nginx: reverse proxy for client + server
# Notes:
#   - Frontend served on http://localhost (nginx on port 80/443)
#   - Backend API proxied at http://localhost/api via nginx
#   - Only nginx, DBs, and monitoring ports are exposed to host
#   - server is private inside the Docker network (no host port binding)

services:
  server:
    build:
      context: ./jamz-server
      dockerfile: Dockerfile.prod
    image: trafficjamz-server:latest
    container_name: trafficjamz-server
    env_file:
      - ./.env.prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - mongodb
      - redis
      - influxdb
      - kafka
    networks:
      - app-network
    restart: always

  client:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.prod
    image: trafficjamz-client:latest
    container_name: trafficjamz-client
    env_file:
      - ./docker/frontend/.env.prod
    depends_on:
      - server
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15
    container_name: trafficjamz-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=topgun
      - POSTGRES_DB=audiogroupapp
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always

  mongodb:
    image: mongo:6
    container_name: trafficjamz-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network
    restart: always

  redis:
    image: redis:7-alpine
    container_name: trafficjamz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: always

  influxdb:
    image: influxdb:2.7
    container_name: trafficjamz-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=1Topgun123
      - DOCKER_INFLUXDB_INIT_ORG=audiogroupapp
      - DOCKER_INFLUXDB_INIT_BUCKET=location_data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=qZrzdohA7sQ8aG5B2a203DW2h7zxjiGstrRCpXtSEdH-XQkvSxj8T5GQ4PN8d6inEL5HhqcwHPgRdwNe6Qs6BA==
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - app-network
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: trafficjamz-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - app-network
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: trafficjamz-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - app-network
    restart: always

  nginx:
    image: nginx:stable-alpine
    container_name: trafficjamz-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./jamz-client-vite/dist:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - client
      - server
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  mongodb-data:
  redis-data:
  influxdb-data:
